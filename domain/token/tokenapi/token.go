// Code generated by gowebx, DO AVOID EDIT.
package tokenapi

import (
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/ixugo/goddd/domain/token"
	"github.com/ixugo/goddd/domain/token/store/tokencache"
	"github.com/ixugo/goddd/domain/token/store/tokendb"
	"github.com/ixugo/goddd/pkg/conc"
	"github.com/ixugo/goddd/pkg/orm"
	"github.com/ixugo/goddd/pkg/web"
	"gorm.io/gorm"
)

type TokenAPI struct {
	TokenCore token.Core
}

func NewTokenAPI(db *gorm.DB) TokenAPI {
	var store token.Storer
	store = tokendb.NewDB(db).AutoMigrate(orm.GetEnabledAutoMigrate())
	// 如果需要缓存，可以取消注释
	// 目前缓存是通过 id 缓存，而此领域没有获取 id 的条件
	store = tokencache.NewCache(store, conc.NewTTLCache(time.Hour))
	core := token.NewCore(store)
	return TokenAPI{TokenCore: core}
}

func Register(g gin.IRouter, api TokenAPI, handler ...gin.HandlerFunc) {
	{
		group := g.Group("/tokens", handler...)
		group.GET("", web.WrapH(api.findTokens))
		group.DELETE("/:id", web.WrapH(api.delToken))
		// group.GET("/:id", web.WrapH(api.getToken))
		// group.PUT("/:id", web.WrapH(api.editToken))
		// group.POST("", web.WrapH(api.addToken))
	}
}

// >>> token >>>>>>>>>>>>>>>>>>>>

func (a TokenAPI) findTokens(c *gin.Context, in *token.FindTokenInput) (any, error) {
	items, total, err := a.TokenCore.FindTokens(c.Request.Context(), in)
	return gin.H{"items": items, "total": total}, err
}

// func (a TokenAPI) getToken(c *gin.Context, _ *struct{}) (any, error) {
// 	tokenID, _ := strconv.Atoi(c.Param("id"))
// 	return a.TokenCore.GetToken(c.Request.Context(), tokenID)
// }

// func (a TokenAPI) editToken(c *gin.Context, in *token.EditTokenInput) (any, error) {
// 	tokenID, _ := strconv.Atoi(c.Param("id"))
// 	return a.TokenCore.EditToken(c.Request.Context(), in, tokenID)
// }

// func (a TokenAPI) addToken(c *gin.Context, in *token.AddTokenInput) (any, error) {
// 	return a.TokenCore.AddToken(c.Request.Context(), in)
// }

func (a TokenAPI) delToken(c *gin.Context, _ *struct{}) (any, error) {
	tokenID, _ := strconv.Atoi(c.Param("id"))
	return a.TokenCore.DelToken(c.Request.Context(), tokenID)
}
